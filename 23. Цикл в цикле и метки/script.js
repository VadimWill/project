"use strict";

// for (let i = 0; i < 3; i++) {
//     console.log(i);
//     for (let j = 0; j < 3; j++) {
//         console.log(j);
//     }
// }


// *
// **
// ***
// ****
// *****
// ******

// let result = '';
// const length = 7;

// for (let i = 1; i < length; i++) {

//     for (let j = 0; j < i; j++ ) {
//         result += '*';
//     }

//     result += '\n';
// }

// console.log(result);


// first: for (let i = 0; i < 3; i++) {
//     console.log(`First level: ${i}`);
//     for (let j = 0; j < 3; j++) {
//         console.log(`Second level: ${j}`);
//         for (let k = 0; k < 5; k++) {
//             if (k === 2) continue first;
//             console.log(`Third level: ${k}`);
//         }
//     }
// }





// Задачи:

//1. При помощи цикла выведите числа от 5 до 10 в консоль. 5 и 10 включительно. Цикл можно использовать любой

//2. При помощи цикла for вывести числа от 20 до 10 в консоль. В обратном порядке (20, 19, 18...). Когда цикл дойдет до числа 13 - остановить весь цикл

//3. При помощи цикла for выведите чётные числа от 2 до 10 включительно

//4. Перепишите цикл  for на вариант с while. Результат должен остаться точно таким же. Не создайте бесконечный цикл! Иначе браузер может зависнуть.

//  Цикл, который нужно переписать:
 
//  for (let i = 2; i <= 16; i++) {
//      if (i % 2 === 0) {
//          continue;
//      } else {
//          console.log(i);
//      }
//  }
//5. Заполните массив цифрами от 5 до 10 включительно. Помните, что элементы массива можно сформировать так же, как и обращаться к ним: arr[0]

// Место для первой задачи
// function firstTask() {
//     // Пишем решение вот тут
//     for (let i = 5; i <= 10; i++) {
//         console.log(i);
//     }
// }
// firstTask();

//2. При помощи цикла for вывести числа от 20 до 10 в консоль. В обратном порядке (20, 19, 18...). Когда цикл дойдет до числа 13 - остановить весь цикл

// Место для второй задачи
// function secondTask() {
    // Пишем решение вот тут
//     for (let j = 20; j > 10; j--) {
//         if (j === 13) {
//             break;
//         }
//         console.log(j);
//     }
// }
// secondTask();

//3. При помощи цикла for выведите чётные числа от 2 до 10 включительно

// Место для третьей задачи
// function thirdTask() {
//     // Пишем решение вот тут
//     for (let k = 2; k <= 10; k++) {
//         if (k % 2 === 1) {
//             continue;
//         } else {
//             console.log(k);
//         }
//         // console.log(k);
//     }
// }
// thirdTask();

// 4. Перепишите цикл  for на вариант с while. Результат должен остаться точно таким же. Не создайте бесконечный цикл! Иначе браузер может зависнуть.

// Место для четвертой задачи


// Цикл, который нужно переписать:

// for (let i = 2; i <= 16; i++) {
//     if (i % 2 === 0) {
//         continue;
//     } else {
//         console.log(i);
//     }
// }

// function fourthTask() {
//     // Пишем решение вот тут
//     let y = 2;

//     while (y < 16 ) {
//         y++;
//         if (y % 2 === 0) {
//         continue;
//         } 
//         console.log(y);
//         }
// }
// fourthTask()

// Место для пятой задачи
// 5. Заполните массив цифрами от 5 до 10 включительно. Помните, что элементы массива можно сформировать так же, как и обращаться к ним: arr[0]

// function fifthTask() {
//     const
    
    
// arrayOfNumbers = [];
//     // let u = arrayOfNumbers;

//     // Пишем решение вот тут
//     for (let u = 5; u <= 10; u++) {
//         arrayOfNumbers.push(u);
//         continue;
//       }
//       console.log(arrayOfNumbers);
    
    
//     // Не трогаем
//     return arrayOfNumbers;
// }
// fifthTask();

// ********************************************************************************
// (*) Продвинутые задания на использование циклов и условий

// Задачи:

// 1. Заполните новый массив (result) числами из старого (arr). Количество элементов в массиве можно получить как arr.length, а к элементам обращаемся все так же: arr[0], arr[1] и тд.
// Должен получиться точно такой же массив

// Место для первой задачи

// function firstTask() {
//     // Значения массива менять нельзя, тут он проверяется автоматически именно на эти значения
//     const arr = [3, 5, 8, 16, 20, 23, 50];
//     const result = [];
    
//     // Пишем решение вот тут
//         for (let i = 0; i < arr.length; i++) {
//            result[i] = arr[i];
//            continue;
//         }
//         console.log(result);
//     // Не трогаем
//     return result;
// }
// firstTask();
// // console.log(result);

// //2. Измените данный массив так, чтобы все числа были увеличены в 2 раза, а если попадается строка - то к ней было добавлено " - done".
// // Для определения типа данных используйте typeof();
// // Должно получиться: [ 10, 20, 'Shopping - done', 40, 'Homework - done' ]

// // // Место для второй задачи
// function secondTask() {
// //     // Значения массива менять нельзя, тут он проверяется автоматически именно на эти значения
//     const data = [5, 10, 'Shopping', 20, 'Homework'];

// //     // Пишем решение вот тут
//     for (let y = 0; y < data.length; y++ )
//         if ( typeof data[y] === 'number') {
//            data[y] = data[y] * 2;
//         } else if (typeof data[y] === 'string') {
//             data[y] = data[y] + "- done";
//         } 
//         console.log(data)
//     // Не трогаем
//         return data;
// }

// secondTask();
// // console.log(data);

// // 3. // Разверните массив data наоборот при помощи цикла и запишите данные в массив result.
// // // Должно получиться: [ 'Homework', 20, 'Shopping', 10, 5 ]

// // Место для третьей задачи
// function thirdTask() {
//     // Значения массива менять нельзя, тут он проверяется автоматически именно на эти значения
//     const data = [5, 10, 'Shopping', 20, 'Homework'];
//     const result = [];

//     for (let i = 1; i <= data.length; i++) {
//         result[i - 1] = data[data.length - i];
        
//      }
//      console.log(result);
//  // Не трогаем
//     return result
// }

// thirdTask();


// (**) Задача на формирование фигуры
// Это одна из классических задач в программировании на формирование самых разных фигур при помощи кода. Вы спросите, а зачем это вообще нужно? Ответов несколько:

// Существуют реальные задачи, когда вы кодом строите геометрию, символы и другие нужные вещи. Вспомните простые электронные табло на улицах, например

// Это хорошо прокачивает логику и разминает мозг

// Позволяет запомнить нюансы работы языка

// Иногда можно встретить просто нереальные вещи, построенные только при помощи кода. Но мы с вами займемся базовой фигурой. Сейчас вам необходимо написать код, который при помощи звездочек (*) в консоли нарисует вот такую фигуру:

//     *
//    ***
//   *****
//  *******
// *********
//***********
// (Подсказка: в конце фигуры есть перенос строки \n, который тоже учитывается в тестах. В КОНЦЕ КАЖДОЙ СТРОКИ НЕТ ПРОБЕЛОВ, ТОЛЬКО ПЕРЕНОС).
// Моё решение 

// const lines = 5;
// let result = '';
// const length = 7;
// // Проверяется именно переменная result, формируйте строку в ней

// for (let i = 1; i < length; i++) { //создаем строки
//     for (let j = lines; j >= i; j-- ) {//создаем пробелы
//         result += ' ';
//     } 
//     for (let k = 0; k < i; k++ ) {
//         result += '*';
//     } 
//     for (let k = 1; k < i; k++ ) {
//         result += '*';
//     } 
//     result += '\n';
// }

// console.log(result);

// Решение автора

// const lines = 5;
// let result = '';

// for (let i = 0; i <= lines; i++) {
//     for (let j = 0; j < lines - i; j++) {
//         result += " ";
//     }
//     for (let j = 0; j < 2 * i + 1; j++) {
//         result += "*";
//     }
//     result += "\n";
// }

// console.log(result);